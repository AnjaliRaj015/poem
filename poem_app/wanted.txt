# Load the dataset
df = pd.read_csv("../final_trial.csv")

# Preprocess the text
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def preprocess(text):
    tokens = word_tokenize(text.lower())
    tokens = [token for token in tokens if token not in stop_words]
    tokens = [stemmer.stem(token) for token in tokens]
    return ' '.join(tokens)

df['clean_text'] = df['Poem'].apply(preprocess)

# Split the poem column into individual stanzas
df['stanzas'] = df['Poem'].apply(sent_tokenize)

# Convert emotions column to numerical labels
emotions = ['love', 'sad', 'anger', 'hate', 'fear', 'surprise', 'courage', 'joy', 'peace',"hope","care"]
df['emotion_label'] = df['Emotion'].apply(emotions.index)

# Extract features from the stanzas using TfidfVectorizer
vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = vectorizer.fit_transform([' '.join(stanza) for stanza in df['stanzas']])
y_train = df['emotion_label']

# Train a passive aggressive classifier model
model = PassiveAggressiveClassifier(random_state=42,max_iter=100)
model.fit(X_train_tfidf, y_train)

# Define a function to predict the emotion of each stanza in a new poem
def predict_emotions(new_poem):
    new_stanzas = sent_tokenize(new_poem)
    new_stanzas_tfidf = vectorizer.transform(new_stanzas)
    new_stanzas_emotions = model.predict(new_stanzas_tfidf)
    new_stanzas_emotions = [emotions[label] for label in new_stanzas_emotions]
    return list(zip(new_stanzas, new_stanzas_emotions))

# Define the routes for the web application
@app.route('/index')
@login_required
def index():
    return render_template('index.html')

@app.route('/', methods=['POST'])
def predict():
    input_type = request.form['input_type']
    if input_type == 'text_input':
        new_poem = request.form['poem_text']
    elif input_type == 'file_input':
        file = request.files['file_input']
        if file.filename.endswith('.txt'):
            new_poem = file.read().decode('utf-8')
        elif file.filename.endswith(('.jpg', '.jpeg', '.png')):
            # Read the image file
            img = Image.open(file)
            # Extract text from the image
            pytesseract.pytesseract.tesseract_cmd = r'D:\tesseract\tesseract.exe'
            extracted_text = pytesseract.image_to_string(img)
            new_poem = extracted_text
        else:
            return render_template('index.html', error_message="Invalid file format. Please upload a text file or an image.")
    else:
        return render_template('index.html', error_message="Invalid input type. Please select either text input or file input.")

    predicted_emotions = predict_emotions(new_poem)
    return render_template('index.html', predicted_emotions=predicted_emotions)

